1. Created a deployment with 3 replicas of nginx image 

apiVersion: v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
template:
    metadata:
      labels:
        app: nginx
spec:
    containers:
    - name: nginx
      image: nginx


2.Created volume mount in the same file with static file location :
    
      volumeMounts:
            - name: nginx-volume
              mountPath: /usr/share/nginx/html

3. Created Presistent volume  file :

    what is PersistentVolume?

    A PersistentVolume (PV) is a piece of storage in the cluster that has been provisioned 
    by an administrator or dynamically provisioned using Storage Classes. 
    It is a resource in the cluster just like a node is a cluster resource. 
    
    When a pod requests storage, it does so through a "Persistent Volume Claim" (PVC), 
    which is a request for a specific amount of storage with specific access modes. 
    The PVC is then bound to an available PV that meets the specified criteria. The 
    pod can then mount the PV as a volume and use it for storage.

        apiVersion: v1
        kind: PersistentVolume
        metadata:
        name: nginx-pvc
        spec:
        capacity:
            storage: 1Gi
        accessModes:
            - ReadWriteOnce
        persistentVolumeReclaimPolicy: Retain
        storageClassName: my-storage-class
        hostPath:
            path: /home/guna/K8s_Task/html


  4. Created clusterIp service :

      It is the default service type that provides the stable ip address that
      can only accessble only inside  the cluster.


        apiVersion: v1
        kind: Service
        metadata:
          name: nginx-service
        spec:
          type: ClusterIP
          selector:
            app: nginx
          ports:
          - name: http
            port: 80
            targetPort: 80

 5. Created static file inside the container using exec command in pod
      command:  kubectl exec -it pod-id  -- bin/bash

      in the default location i.e : usr/share/nginx/html

      we can verify in the remaining pods weather the file is present or not
      using exec command

      verifed and it is available in all the 3 replicas

 6. Then exposed the pods to local machine using port-forward
       command : kubectl port-forward service/service-name  8080:80

      Here it will forward the port on local machine on 8080

      if 8080 is already in use 
      we can use 9090 or any other port

      verify this in local machine by hitting:
      localhost:9090/page1.html 

      verifed that it is working

7. Created nodePort service with name : nginx-service-nodePort

      apiVersion: v1
      kind: Service
      metadata:
        name: nginx-service-nodeport
      spec:
        type: NodePort
        selector:
          app: nginx
        ports:
          - name: http
            port: 80
            targetPort: 80
            protocol: TCP

      after configuring nodePort service 

      get the details of the node :
      command :kubectl get nodes 
      command : kubectl describe node minikube 
          or 
      command : kubectl get nodes -o wide  
       this will give the ip address of the node 
       and then, get the port number on which the clusterIp service is running

       using that ip address and port number you can access the pod
      
      you can access by hitting http :
      http://<ip-address>:port/page1.html

      I verifed it is working fine

  
8.Created Ingress file:

    Ingress is a resource that allows you to manage external access to your cluster's 
    services. An ingress controller is a component that handles incoming traffic from 
    the internet and routes it to the appropriate service within the Kubernetes cluster.

      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: nginx-ingress
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
      spec:
        rules:
        - host: task.com
          http:
            paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: nginx-service
                  port:
                    name: http

        
        Created ingress configuration for the nginx-service and 
        configred the hosts file in /etc/hosts

        mapped the ip address with task.com

        now verifed it by hitting :
        task.com/page1.html

        it is working fine


        Need to learn some more configurations in the ingress and persisten volume 
        file 

        In further working on I will learn those configurations

    


            



 







